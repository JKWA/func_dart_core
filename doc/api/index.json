[{"name":"boolean","qualifiedName":"boolean","href":"boolean/boolean-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"BoolEq","qualifiedName":"boolean.BoolEq","href":"boolean/BoolEq-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the equality comparison for boolean values.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"BoolEq","qualifiedName":"boolean.BoolEq.BoolEq","href":"boolean/BoolEq/BoolEq.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BoolEq","type":"class","href":"boolean/BoolEq-class.html"}},{"name":"equals","qualifiedName":"boolean.BoolEq.equals","href":"boolean/BoolEq/equals.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Checks if x and y are equal.","enclosedBy":{"name":"BoolEq","type":"class","href":"boolean/BoolEq-class.html"}},{"name":"BooleanOrd","qualifiedName":"boolean.BooleanOrd","href":"boolean/BooleanOrd-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the Ord typeclass for boolean values.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"BooleanOrd","qualifiedName":"boolean.BooleanOrd.BooleanOrd","href":"boolean/BooleanOrd/BooleanOrd.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BooleanOrd","type":"class","href":"boolean/BooleanOrd-class.html"}},{"name":"compare","qualifiedName":"boolean.BooleanOrd.compare","href":"boolean/BooleanOrd/compare.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Compares two values and returns an int indicating their order.","enclosedBy":{"name":"BooleanOrd","type":"class","href":"boolean/BooleanOrd-class.html"}},{"name":"equals","qualifiedName":"boolean.BooleanOrd.equals","href":"boolean/BooleanOrd/equals.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Checks if x and y are equal.","enclosedBy":{"name":"BooleanOrd","type":"class","href":"boolean/BooleanOrd-class.html"}},{"name":"MonoidAll","qualifiedName":"boolean.MonoidAll","href":"boolean/MonoidAll-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the Monoid typeclass for boolean values with logical AND.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"MonoidAll","qualifiedName":"boolean.MonoidAll.MonoidAll","href":"boolean/MonoidAll/MonoidAll.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidAll","type":"class","href":"boolean/MonoidAll-class.html"}},{"name":"concat","qualifiedName":"boolean.MonoidAll.concat","href":"boolean/MonoidAll/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"MonoidAll","type":"class","href":"boolean/MonoidAll-class.html"}},{"name":"empty","qualifiedName":"boolean.MonoidAll.empty","href":"boolean/MonoidAll/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidAll","type":"class","href":"boolean/MonoidAll-class.html"}},{"name":"MonoidAny","qualifiedName":"boolean.MonoidAny","href":"boolean/MonoidAny-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the Monoid typeclass for boolean values with logical OR.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"MonoidAny","qualifiedName":"boolean.MonoidAny.MonoidAny","href":"boolean/MonoidAny/MonoidAny.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidAny","type":"class","href":"boolean/MonoidAny-class.html"}},{"name":"concat","qualifiedName":"boolean.MonoidAny.concat","href":"boolean/MonoidAny/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"MonoidAny","type":"class","href":"boolean/MonoidAny-class.html"}},{"name":"empty","qualifiedName":"boolean.MonoidAny.empty","href":"boolean/MonoidAny/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidAny","type":"class","href":"boolean/MonoidAny-class.html"}},{"name":"SemigroupAll","qualifiedName":"boolean.SemigroupAll","href":"boolean/SemigroupAll-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the Semigroup typeclass for boolean values with logical AND.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"SemigroupAll","qualifiedName":"boolean.SemigroupAll.SemigroupAll","href":"boolean/SemigroupAll/SemigroupAll.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"SemigroupAll","type":"class","href":"boolean/SemigroupAll-class.html"}},{"name":"concat","qualifiedName":"boolean.SemigroupAll.concat","href":"boolean/SemigroupAll/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"SemigroupAll","type":"class","href":"boolean/SemigroupAll-class.html"}},{"name":"SemigroupAny","qualifiedName":"boolean.SemigroupAny","href":"boolean/SemigroupAny-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Implements the Semigroup typeclass for boolean values with logical OR.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"SemigroupAny","qualifiedName":"boolean.SemigroupAny.SemigroupAny","href":"boolean/SemigroupAny/SemigroupAny.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"SemigroupAny","type":"class","href":"boolean/SemigroupAny-class.html"}},{"name":"concat","qualifiedName":"boolean.SemigroupAny.concat","href":"boolean/SemigroupAny/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"SemigroupAny","type":"class","href":"boolean/SemigroupAny-class.html"}},{"name":"eqBool","qualifiedName":"boolean.eqBool","href":"boolean/eqBool.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Instance of boolean equality comparison.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"fold","qualifiedName":"boolean.fold","href":"boolean/fold.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Alias for match","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"foldW","qualifiedName":"boolean.foldW","href":"boolean/foldW.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Alias for matchW","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"match","qualifiedName":"boolean.match","href":"boolean/match.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that depending on the provided bool value,\ninvokes and returns the result of either onFalse or onTrue function.\nBoth onFalse and onTrue must return the same type A.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"matchW","qualifiedName":"boolean.matchW","href":"boolean/matchW.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that depending on the provided bool value,\ninvokes and returns the result of either onFalse or onTrue function.\nThe return type is Object? because onFalse and onTrue can potentially\nreturn different types.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"semigroupAll","qualifiedName":"boolean.semigroupAll","href":"boolean/semigroupAll.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Instance of the Semigroup with logical AND.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"semigroupAny","qualifiedName":"boolean.semigroupAny","href":"boolean/semigroupAny.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Instance of the Semigroup with logical OR.","enclosedBy":{"name":"boolean","type":"library","href":"boolean/boolean-library.html"}},{"name":"bounded","qualifiedName":"bounded","href":"bounded/bounded-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"Bounded","qualifiedName":"bounded.Bounded","href":"bounded/Bounded-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines a bounded type A which extends the Ord type.","enclosedBy":{"name":"bounded","type":"library","href":"bounded/bounded-library.html"}},{"name":"Bounded","qualifiedName":"bounded.Bounded.Bounded","href":"bounded/Bounded/Bounded.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Bounded","type":"class","href":"bounded/Bounded-class.html"}},{"name":"bottom","qualifiedName":"bounded.Bounded.bottom","href":"bounded/Bounded/bottom.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"The lower bound of type A.","enclosedBy":{"name":"Bounded","type":"class","href":"bounded/Bounded-class.html"}},{"name":"top","qualifiedName":"bounded.Bounded.top","href":"bounded/Bounded/top.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"The upper bound of type A.","enclosedBy":{"name":"Bounded","type":"class","href":"bounded/Bounded-class.html"}},{"name":"clamp","qualifiedName":"bounded.clamp","href":"bounded/clamp.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that clamps a value of type A within its bounds.","enclosedBy":{"name":"bounded","type":"library","href":"bounded/bounded-library.html"}},{"name":"reverse","qualifiedName":"bounded.reverse","href":"bounded/reverse.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a Bounded&lt;A&gt; with its bounds reversed.","enclosedBy":{"name":"bounded","type":"library","href":"bounded/bounded-library.html"}},{"name":"eq","qualifiedName":"eq","href":"eq/eq-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"Eq","qualifiedName":"eq.Eq","href":"eq/Eq-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines an equality relation on a type A.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"Eq","qualifiedName":"eq.Eq.Eq","href":"eq/Eq/Eq.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Eq","type":"class","href":"eq/Eq-class.html"}},{"name":"equals","qualifiedName":"eq.Eq.equals","href":"eq/Eq/equals.html","type":"method","overriddenDepth":0,"packageName":"functional_dart","desc":"Checks if x and y are equal.","enclosedBy":{"name":"Eq","type":"class","href":"eq/Eq-class.html"}},{"name":"Monoid","qualifiedName":"eq.Monoid","href":"eq/Monoid-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines a monoid for the Eq type.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"Monoid","qualifiedName":"eq.Monoid.Monoid","href":"eq/Monoid/Monoid.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Monoid","type":"class","href":"eq/Monoid-class.html"}},{"name":"concat","qualifiedName":"eq.Monoid.concat","href":"eq/Monoid/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Concatenates two Eq instances by delegating to the semigroup's concat method.","enclosedBy":{"name":"Monoid","type":"class","href":"eq/Monoid-class.html"}},{"name":"empty","qualifiedName":"eq.Monoid.empty","href":"eq/Monoid/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"Provides an \"empty\" Eq instance which considers all elements equal.","enclosedBy":{"name":"Monoid","type":"class","href":"eq/Monoid-class.html"}},{"name":"Semigroup","qualifiedName":"eq.Semigroup","href":"eq/Semigroup-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines a semigroup for the Eq type.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"Semigroup","qualifiedName":"eq.Semigroup.Semigroup","href":"eq/Semigroup/Semigroup.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Semigroup","type":"class","href":"eq/Semigroup-class.html"}},{"name":"concat","qualifiedName":"eq.Semigroup.concat","href":"eq/Semigroup/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Concatenates two Eq instances by checking equality on both.","enclosedBy":{"name":"Semigroup","type":"class","href":"eq/Semigroup-class.html"}},{"name":"contramap","qualifiedName":"eq.contramap","href":"eq/contramap.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Transforms an Eq&lt;B&gt; into an Eq&lt;A&gt; using the given function.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"fromEquals","qualifiedName":"eq.fromEquals","href":"eq/fromEquals.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates an Eq from a given equality checking function.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"getMonoid","qualifiedName":"eq.getMonoid","href":"eq/getMonoid.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a monoid for the Eq type.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"getSemigroup","qualifiedName":"eq.getSemigroup","href":"eq/getSemigroup.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a semigroup for the Eq type.","enclosedBy":{"name":"eq","type":"library","href":"eq/eq-library.html"}},{"name":"function","qualifiedName":"function","href":"function/function-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"FunctionWrapper","qualifiedName":"function.FunctionWrapper","href":"function/FunctionWrapper-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Wraps a function func of type S Function(A) so it can be called as an instance method.","enclosedBy":{"name":"function","type":"library","href":"function/function-library.html"}},{"name":"FunctionWrapper","qualifiedName":"function.FunctionWrapper.FunctionWrapper","href":"function/FunctionWrapper/FunctionWrapper.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"FunctionWrapper","type":"class","href":"function/FunctionWrapper-class.html"}},{"name":"call","qualifiedName":"function.FunctionWrapper.call","href":"function/FunctionWrapper/call.html","type":"method","overriddenDepth":0,"packageName":"functional_dart","desc":"Allows the wrapped function to be called as an instance method.","enclosedBy":{"name":"FunctionWrapper","type":"class","href":"function/FunctionWrapper-class.html"}},{"name":"func","qualifiedName":"function.FunctionWrapper.func","href":"function/FunctionWrapper/func.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"Function to be wrapped.","enclosedBy":{"name":"FunctionWrapper","type":"class","href":"function/FunctionWrapper-class.html"}},{"name":"LazyArg","qualifiedName":"function.LazyArg","href":"function/LazyArg.html","type":"typedef","overriddenDepth":0,"packageName":"functional_dart","desc":"Function that returns an instance of type A.","enclosedBy":{"name":"function","type":"library","href":"function/function-library.html"}},{"name":"getSemigroup","qualifiedName":"function.getSemigroup","href":"function/getSemigroup.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a semigroup for the FunctionWrapper type, using a provided semigroup for the S type.","enclosedBy":{"name":"function","type":"library","href":"function/function-library.html"}},{"name":"identity","qualifiedName":"function.identity","href":"function/identity.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Identity function.","enclosedBy":{"name":"function","type":"library","href":"function/function-library.html"}},{"name":"integer","qualifiedName":"integer","href":"integer/integer-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"BoundedInt","qualifiedName":"integer.BoundedInt","href":"integer/BoundedInt-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"A bounded order instance for integer type with specified lower and upper bounds.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"BoundedInt","qualifiedName":"integer.BoundedInt.BoundedInt","href":"integer/BoundedInt/BoundedInt.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BoundedInt","type":"class","href":"integer/BoundedInt-class.html"}},{"name":"bottom","qualifiedName":"integer.BoundedInt.bottom","href":"integer/BoundedInt/bottom.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"The lower bound of type A.","enclosedBy":{"name":"BoundedInt","type":"class","href":"integer/BoundedInt-class.html"}},{"name":"equals","qualifiedName":"integer.BoundedInt.equals","href":"integer/BoundedInt/equals.html","type":"method","overriddenDepth":2,"packageName":"functional_dart","desc":"Returns true if the two values are equal according to the compare function.","enclosedBy":{"name":"BoundedInt","type":"class","href":"integer/BoundedInt-class.html"}},{"name":"top","qualifiedName":"integer.BoundedInt.top","href":"integer/BoundedInt/top.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"The upper bound of type A.","enclosedBy":{"name":"BoundedInt","type":"class","href":"integer/BoundedInt-class.html"}},{"name":"IntegerEq","qualifiedName":"integer.IntegerEq","href":"integer/IntegerEq-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"An equality instance for integer type.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"IntegerEq","qualifiedName":"integer.IntegerEq.IntegerEq","href":"integer/IntegerEq/IntegerEq.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"IntegerEq","type":"class","href":"integer/IntegerEq-class.html"}},{"name":"equals","qualifiedName":"integer.IntegerEq.equals","href":"integer/IntegerEq/equals.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Checks if x and y are equal.","enclosedBy":{"name":"IntegerEq","type":"class","href":"integer/IntegerEq-class.html"}},{"name":"IntegerOrd","qualifiedName":"integer.IntegerOrd","href":"integer/IntegerOrd-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"An ordering instance for integer type.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"IntegerOrd","qualifiedName":"integer.IntegerOrd.IntegerOrd","href":"integer/IntegerOrd/IntegerOrd.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"IntegerOrd","type":"class","href":"integer/IntegerOrd-class.html"}},{"name":"MonoidProduct","qualifiedName":"integer.MonoidProduct","href":"integer/MonoidProduct-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"A monoid instance for integer multiplication with identity element being 1.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"MonoidProduct","qualifiedName":"integer.MonoidProduct.MonoidProduct","href":"integer/MonoidProduct/MonoidProduct.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidProduct","type":"class","href":"integer/MonoidProduct-class.html"}},{"name":"concat","qualifiedName":"integer.MonoidProduct.concat","href":"integer/MonoidProduct/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"MonoidProduct","type":"class","href":"integer/MonoidProduct-class.html"}},{"name":"empty","qualifiedName":"integer.MonoidProduct.empty","href":"integer/MonoidProduct/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidProduct","type":"class","href":"integer/MonoidProduct-class.html"}},{"name":"MonoidSum","qualifiedName":"integer.MonoidSum","href":"integer/MonoidSum-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"A monoid instance for integer addition with identity element being 0.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"MonoidSum","qualifiedName":"integer.MonoidSum.MonoidSum","href":"integer/MonoidSum/MonoidSum.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidSum","type":"class","href":"integer/MonoidSum-class.html"}},{"name":"concat","qualifiedName":"integer.MonoidSum.concat","href":"integer/MonoidSum/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"MonoidSum","type":"class","href":"integer/MonoidSum-class.html"}},{"name":"empty","qualifiedName":"integer.MonoidSum.empty","href":"integer/MonoidSum/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidSum","type":"class","href":"integer/MonoidSum-class.html"}},{"name":"SemigroupProduct","qualifiedName":"integer.SemigroupProduct","href":"integer/SemigroupProduct-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"A semigroup instance for integer multiplication.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"SemigroupProduct","qualifiedName":"integer.SemigroupProduct.SemigroupProduct","href":"integer/SemigroupProduct/SemigroupProduct.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"SemigroupProduct","type":"class","href":"integer/SemigroupProduct-class.html"}},{"name":"concat","qualifiedName":"integer.SemigroupProduct.concat","href":"integer/SemigroupProduct/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"SemigroupProduct","type":"class","href":"integer/SemigroupProduct-class.html"}},{"name":"SemigroupSum","qualifiedName":"integer.SemigroupSum","href":"integer/SemigroupSum-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"A semigroup instance for integer addition.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"SemigroupSum","qualifiedName":"integer.SemigroupSum.SemigroupSum","href":"integer/SemigroupSum/SemigroupSum.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"SemigroupSum","type":"class","href":"integer/SemigroupSum-class.html"}},{"name":"concat","qualifiedName":"integer.SemigroupSum.concat","href":"integer/SemigroupSum/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"SemigroupSum","type":"class","href":"integer/SemigroupSum-class.html"}},{"name":"boundedInt","qualifiedName":"integer.boundedInt","href":"integer/boundedInt.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Constructs a BoundedInt object with specified lower and upper bounds.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"eqInt","qualifiedName":"integer.eqInt","href":"integer/eqInt.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Predefined instances.","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"monoidProduct","qualifiedName":"integer.monoidProduct","href":"integer/monoidProduct.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"monoidSum","qualifiedName":"integer.monoidSum","href":"integer/monoidSum.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"ordInt","qualifiedName":"integer.ordInt","href":"integer/ordInt.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"semigroupProduct","qualifiedName":"integer.semigroupProduct","href":"integer/semigroupProduct.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"semigroupSum","qualifiedName":"integer.semigroupSum","href":"integer/semigroupSum.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"integer","type":"library","href":"integer/integer-library.html"}},{"name":"monoid","qualifiedName":"monoid","href":"monoid/monoid-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"BaseMonoid","qualifiedName":"monoid.BaseMonoid","href":"monoid/BaseMonoid-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Base Monoid abstract class, extends BaseSemigroup with an empty getter","enclosedBy":{"name":"monoid","type":"library","href":"monoid/monoid-library.html"}},{"name":"BaseMonoid","qualifiedName":"monoid.BaseMonoid.BaseMonoid","href":"monoid/BaseMonoid/BaseMonoid.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BaseMonoid","type":"class","href":"monoid/BaseMonoid-class.html"}},{"name":"empty","qualifiedName":"monoid.BaseMonoid.empty","href":"monoid/BaseMonoid/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BaseMonoid","type":"class","href":"monoid/BaseMonoid-class.html"}},{"name":"concatAll","qualifiedName":"monoid.concatAll","href":"monoid/concatAll.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that takes a list of type T and concatenates all elements in the list using the monoid","enclosedBy":{"name":"monoid","type":"library","href":"monoid/monoid-library.html"}},{"name":"max","qualifiedName":"monoid.max","href":"monoid/max.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a monoid that finds the maximum value in a Bounded structure","enclosedBy":{"name":"monoid","type":"library","href":"monoid/monoid-library.html"}},{"name":"min","qualifiedName":"monoid.min","href":"monoid/min.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a monoid that finds the minimum value in a Bounded structure","enclosedBy":{"name":"monoid","type":"library","href":"monoid/monoid-library.html"}},{"name":"reverse","qualifiedName":"monoid.reverse","href":"monoid/reverse.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a reversed version of the provided monoid","enclosedBy":{"name":"monoid","type":"library","href":"monoid/monoid-library.html"}},{"name":"ord","qualifiedName":"ord","href":"ord/ord-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"Monoid","qualifiedName":"ord.Monoid","href":"ord/Monoid-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Monoid structure for Ord instances.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"Monoid","qualifiedName":"ord.Monoid.Monoid","href":"ord/Monoid/Monoid.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Monoid","type":"class","href":"ord/Monoid-class.html"}},{"name":"concat","qualifiedName":"ord.Monoid.concat","href":"ord/Monoid/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Combines two Ord instances into a new one.","enclosedBy":{"name":"Monoid","type":"class","href":"ord/Monoid-class.html"}},{"name":"empty","qualifiedName":"ord.Monoid.empty","href":"ord/Monoid/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a default Ord instance that considers all values as equal.","enclosedBy":{"name":"Monoid","type":"class","href":"ord/Monoid-class.html"}},{"name":"NumberOrd","qualifiedName":"ord.NumberOrd","href":"ord/NumberOrd-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines an order relation for numbers.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"NumberOrd","qualifiedName":"ord.NumberOrd.NumberOrd","href":"ord/NumberOrd/NumberOrd.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"NumberOrd","type":"class","href":"ord/NumberOrd-class.html"}},{"name":"Ord","qualifiedName":"ord.Ord","href":"ord/Ord-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines an order relation for type A.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"Ord","qualifiedName":"ord.Ord.Ord","href":"ord/Ord/Ord.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Ord","type":"class","href":"ord/Ord-class.html"}},{"name":"compare","qualifiedName":"ord.Ord.compare","href":"ord/Ord/compare.html","type":"method","overriddenDepth":0,"packageName":"functional_dart","desc":"Compares two values and returns an int indicating their order.","enclosedBy":{"name":"Ord","type":"class","href":"ord/Ord-class.html"}},{"name":"equals","qualifiedName":"ord.Ord.equals","href":"ord/Ord/equals.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Returns true if the two values are equal according to the compare function.","enclosedBy":{"name":"Ord","type":"class","href":"ord/Ord-class.html"}},{"name":"Semigroup","qualifiedName":"ord.Semigroup","href":"ord/Semigroup-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"Semigroup structure for Ord instances.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"Semigroup","qualifiedName":"ord.Semigroup.Semigroup","href":"ord/Semigroup/Semigroup.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"Semigroup","type":"class","href":"ord/Semigroup-class.html"}},{"name":"concat","qualifiedName":"ord.Semigroup.concat","href":"ord/Semigroup/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Combines two Ord instances into a new one.","enclosedBy":{"name":"Semigroup","type":"class","href":"ord/Semigroup-class.html"}},{"name":"between","qualifiedName":"ord.between","href":"ord/between.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that checks if a value is within a given range.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"clamp","qualifiedName":"ord.clamp","href":"ord/clamp.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that clamps a value within a given range.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"contramap","qualifiedName":"ord.contramap","href":"ord/contramap.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a contramap function that transforms an Ord instance based on function f.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"fromCompare","qualifiedName":"ord.fromCompare","href":"ord/fromCompare.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new Ord instance given a compare function.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"getMonoid","qualifiedName":"ord.getMonoid","href":"ord/getMonoid.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new Monoid instance for Ord.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"getSemigroup","qualifiedName":"ord.getSemigroup","href":"ord/getSemigroup.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new Semigroup instance for Ord.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"gt","qualifiedName":"ord.gt","href":"ord/gt.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that checks if the first argument is greater than the second.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"lt","qualifiedName":"ord.lt","href":"ord/lt.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that checks if the first argument is less than the second.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"max","qualifiedName":"ord.max","href":"ord/max.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that returns the maximum of two values.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"min","qualifiedName":"ord.min","href":"ord/min.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a function that returns the minimum of two values.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"reverse","qualifiedName":"ord.reverse","href":"ord/reverse.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a new Ord instance that reverses the order relation.","enclosedBy":{"name":"ord","type":"library","href":"ord/ord-library.html"}},{"name":"predicate","qualifiedName":"predicate","href":"predicate/predicate-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"Predicate","qualifiedName":"predicate.Predicate","href":"predicate/Predicate.html","type":"typedef","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines a function that takes a value of type A and returns a boolean.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"and","qualifiedName":"predicate.and","href":"predicate/and.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new predicate that is the logical conjunction of two given predicates.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"contramap","qualifiedName":"predicate.contramap","href":"predicate/contramap.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Transforms a predicate using a function.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"match","qualifiedName":"predicate.match","href":"predicate/match.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Matches a value against a predicate and returns a function.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"not","qualifiedName":"predicate.not","href":"predicate/not.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new predicate that is the logical negation of a given predicate.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"or","qualifiedName":"predicate.or","href":"predicate/or.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a new predicate that is the logical disjunction of two given predicates.","enclosedBy":{"name":"predicate","type":"library","href":"predicate/predicate-library.html"}},{"name":"semigroup","qualifiedName":"semigroup","href":"semigroup/semigroup-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"BaseSemigroup","qualifiedName":"semigroup.BaseSemigroup","href":"semigroup/BaseSemigroup-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"BaseSemigroup is an abstract class that defines a generic type for Semigroups","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"BaseSemigroup","qualifiedName":"semigroup.BaseSemigroup.BaseSemigroup","href":"semigroup/BaseSemigroup/BaseSemigroup.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"BaseSemigroup","type":"class","href":"semigroup/BaseSemigroup-class.html"}},{"name":"concat","qualifiedName":"semigroup.BaseSemigroup.concat","href":"semigroup/BaseSemigroup/concat.html","type":"method","overriddenDepth":0,"packageName":"functional_dart","desc":"Method that must be implemented to combine two elements of the Semigroup","enclosedBy":{"name":"BaseSemigroup","type":"class","href":"semigroup/BaseSemigroup-class.html"}},{"name":"concatAll","qualifiedName":"semigroup.concatAll","href":"semigroup/concatAll.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a function that concatenates a list of elements\nstarting from a given element.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"constant","qualifiedName":"semigroup.constant","href":"semigroup/constant.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that always returns a specific constant value,\nignoring its arguments.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"first","qualifiedName":"semigroup.first","href":"semigroup/first.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that always selects the first of two elements.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"intercalate","qualifiedName":"semigroup.intercalate","href":"semigroup/intercalate.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that concatenates elements with a specific \"middle\" element.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"last","qualifiedName":"semigroup.last","href":"semigroup/last.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that always selects the second of two elements.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"max","qualifiedName":"semigroup.max","href":"semigroup/max.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that uses an Ord instance to pick the maximum of two elements.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"min","qualifiedName":"semigroup.min","href":"semigroup/min.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that uses an Ord instance to pick the minimum of two elements.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"reverse","qualifiedName":"semigroup.reverse","href":"semigroup/reverse.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a semigroup that reverses the order of its arguments before concatenating.","enclosedBy":{"name":"semigroup","type":"library","href":"semigroup/semigroup-library.html"}},{"name":"string","qualifiedName":"string","href":"string/string-library.html","type":"library","overriddenDepth":0,"packageName":"functional_dart","desc":""},{"name":"MonoidConcat","qualifiedName":"string.MonoidConcat","href":"string/MonoidConcat-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"MonoidConcat is a concrete implementation of a Monoid for Strings.","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"MonoidConcat","qualifiedName":"string.MonoidConcat.MonoidConcat","href":"string/MonoidConcat/MonoidConcat.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"MonoidConcat","type":"class","href":"string/MonoidConcat-class.html"}},{"name":"concat","qualifiedName":"string.MonoidConcat.concat","href":"string/MonoidConcat/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Defines the operation of combining two String values","enclosedBy":{"name":"MonoidConcat","type":"class","href":"string/MonoidConcat-class.html"}},{"name":"empty","qualifiedName":"string.MonoidConcat.empty","href":"string/MonoidConcat/empty.html","type":"property","overriddenDepth":0,"packageName":"functional_dart","desc":"Defines the identity element for the operation of this Monoid","enclosedBy":{"name":"MonoidConcat","type":"class","href":"string/MonoidConcat-class.html"}},{"name":"SemigroupConcat","qualifiedName":"string.SemigroupConcat","href":"string/SemigroupConcat-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"SemigroupConcat is a concrete implementation of a Semigroup for Strings.","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"SemigroupConcat","qualifiedName":"string.SemigroupConcat.SemigroupConcat","href":"string/SemigroupConcat/SemigroupConcat.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"SemigroupConcat","type":"class","href":"string/SemigroupConcat-class.html"}},{"name":"concat","qualifiedName":"string.SemigroupConcat.concat","href":"string/SemigroupConcat/concat.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Defines the operation of combining two String values","enclosedBy":{"name":"SemigroupConcat","type":"class","href":"string/SemigroupConcat-class.html"}},{"name":"StringEq","qualifiedName":"string.StringEq","href":"string/StringEq-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"StringEq is a concrete implementation of Eq for Strings.","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"StringEq","qualifiedName":"string.StringEq.StringEq","href":"string/StringEq/StringEq.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"","enclosedBy":{"name":"StringEq","type":"class","href":"string/StringEq-class.html"}},{"name":"equals","qualifiedName":"string.StringEq.equals","href":"string/StringEq/equals.html","type":"method","overriddenDepth":1,"packageName":"functional_dart","desc":"Defines the equivalence of two String values","enclosedBy":{"name":"StringEq","type":"class","href":"string/StringEq-class.html"}},{"name":"StringOrd","qualifiedName":"string.StringOrd","href":"string/StringOrd-class.html","type":"class","overriddenDepth":0,"packageName":"functional_dart","desc":"StringOrd is a concrete implementation of Ord for Strings.","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"StringOrd","qualifiedName":"string.StringOrd.StringOrd","href":"string/StringOrd/StringOrd.html","type":"constructor","overriddenDepth":0,"packageName":"functional_dart","desc":"Creates a StringOrd, which will compare Strings by using their inherent order.","enclosedBy":{"name":"StringOrd","type":"class","href":"string/StringOrd-class.html"}},{"name":"endsWith","qualifiedName":"string.endsWith","href":"string/endsWith.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Checks if a String ends with a substring","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"eqString","qualifiedName":"string.eqString","href":"string/eqString.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Provides the instance of Eq for Strings","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"includes","qualifiedName":"string.includes","href":"string/includes.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Checks if a String includes a substring","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"isEmpty","qualifiedName":"string.isEmpty","href":"string/isEmpty.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Checks if a String is empty","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"monoidConcat","qualifiedName":"string.monoidConcat","href":"string/monoidConcat.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Provides the instance of Monoid for Strings","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"ordString","qualifiedName":"string.ordString","href":"string/ordString.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Provides the instance of Ord for Strings","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"replace","qualifiedName":"string.replace","href":"string/replace.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Replaces first occurrence of a substring within a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"semigroupConcat","qualifiedName":"string.semigroupConcat","href":"string/semigroupConcat.html","type":"top-level property","overriddenDepth":0,"packageName":"functional_dart","desc":"Provides the instance of Semigroup for Strings","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"size","qualifiedName":"string.size","href":"string/size.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns the size of a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"slice","qualifiedName":"string.slice","href":"string/slice.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Returns a section of a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"split","qualifiedName":"string.split","href":"string/split.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Splits a String by a separator","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"startsWith","qualifiedName":"string.startsWith","href":"string/startsWith.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Checks if a String starts with a substring","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"toLowerCase","qualifiedName":"string.toLowerCase","href":"string/toLowerCase.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Converts a String to lower case","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"toUpperCase","qualifiedName":"string.toUpperCase","href":"string/toUpperCase.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Converts a String to upper case","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"trim","qualifiedName":"string.trim","href":"string/trim.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Trims whitespace from both ends of a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"trimLeft","qualifiedName":"string.trimLeft","href":"string/trimLeft.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Trims whitespace from the start of a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}},{"name":"trimRight","qualifiedName":"string.trimRight","href":"string/trimRight.html","type":"function","overriddenDepth":0,"packageName":"functional_dart","desc":"Trims whitespace from the end of a String","enclosedBy":{"name":"string","type":"library","href":"string/string-library.html"}}]
